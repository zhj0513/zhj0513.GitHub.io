<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MySQL on Gakkiの一般男性</title>
    <link>https://zhj0513.github.io/tags/mysql/</link>
    <description>Recent content in MySQL on Gakkiの一般男性</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 27 Sep 2021 05:37:05 +0800</lastBuildDate><atom:link href="https://zhj0513.github.io/tags/mysql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MySQL慢查询分析</title>
      <link>https://zhj0513.github.io/p/mysql%E6%85%A2%E6%9F%A5%E8%AF%A2%E5%88%86%E6%9E%90/</link>
      <pubDate>Mon, 27 Sep 2021 05:37:05 +0800</pubDate>
      
      <guid>https://zhj0513.github.io/p/mysql%E6%85%A2%E6%9F%A5%E8%AF%A2%E5%88%86%E6%9E%90/</guid>
      <description>定位慢sql 1、查看慢查询日志确定已经执行完的慢查询 1mysql&amp;gt; set global slow_query_log = on; 2mysql&amp;gt; set global long_query_time = 1; 3mysql&amp;gt; show global variables like &amp;#34;datadir&amp;#34;; 4mysql&amp;gt; show global variables like &amp;#34;slow_query_log_file&amp;#34;; 5 6[root@mysqltest ~]# tail -n5 /data/mysql/data/3306/mysql-slow.log 7Time: 2019-05-21T09:15:06.255554+08:00 8User@Host: root[root] @ localhost [] Id: 8591152 9Query_time: 10.000260 Lock_time: 0.000000 Rows_sent: 1 Rows_examined: 0 10SET timestamp=1558401306; 11select sleep(10); 可以看到查询时间、表锁时间、扫描行数Rows_examined。
执行器调用一次，引擎实际扫描行数跟Rows_examined并不是完全相同。
2、show processlist 查看正在执行的慢查询 1mysql&amp;gt; show processlist\G` 2 3`*************************** 10. row ***************************` 4`Id: 7651833` 5`User: one` 6`Host: 192.</description>
    </item>
    
    <item>
      <title>MySQL数据类型</title>
      <link>https://zhj0513.github.io/p/mysql%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sun, 26 Sep 2021 05:37:05 +0800</pubDate>
      
      <guid>https://zhj0513.github.io/p/mysql%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>MySQL数据类型 整数类型 TINYINT(-128~127)、SMALLINT、INT(-2^31^ ~ 2^31^–1(21亿多))、BIGINT
分别表示1字节、2字节、4字节、8字节整数。任何整数类型都可以加上UNSIGNED属性，表示数据无符号，即非负整数。
指定长度：整数类型可以被指定长度。例如==INT(11)==表示指定长度为11的INT类型，表示显示字符的个数。==指定长度不会限制值的合法范围及存储所消耗的空间。==
实数类型 FLOAT、DOUBLE、DECIMAL
FLOAT： 1bit（符号位） 8bits（指数位） 23bits（尾数位） DOUBLE：1bit（符号位） 11bits（指数位） 52bits（尾数位） float的指数范围为-127~ 128，而double的指数范围为-1023~1024，==指数位是按补码的形式来划分的==。 其中负指数决定了浮点数所能表达的绝对值最小的非零数，正指数决定了浮点数所能表达的绝对值最大的数，两者决定了浮点数的取值范围。例如：尾数2^23 = 8388608，一共七位，这意味着最多能有7位有效数字
   类型 字节 有效数字 数值范围     float 4 7 -3.4 * 10^38^～3.4 * 10^38^   double 8 15 -1.7 * 10^-308^~1.7 * 10^308^    DECIMAL：以字符串形式存储，可存储比BIGINT大的整型，也可存储精确的小数，常用于银行帐目计算(由于0.1无法由二进制精确表示)。DECIMAL(M,D)，M(0 ~ 38)，D(0~30)，D不能大于 M-2。
例如：DECIMAL(10,2) 总共能存10位数字，小数点后两位，字段最大值99999999.99
字符串类型 VARCHAR、CHAR、TEXT、ENUM
VARCHAR(0～65535)用于存储可变长字符串，它比定长类型更节省空间。
VARCHAR使用额外1或2个字节存储字符串长度。列长度小于255字节时，使用1字节表示，否则使用2字节表示。
VARCHAR存储的内容超出设置的长度时，内容会被截断。
CHAR(0~255)是定长的，根据定义的字符串长度分配足够的空间。
CHAR会根据需要使用空格进行填充方便比较。
CHAR适合存储很短的字符串，或者所有值都接近同一个长度。
CHAR存储的内容超出设置的长度时，内容同样会被截断。
使用策略：
CHAR/VARCHAR类型：</description>
    </item>
    
    <item>
      <title>MySQL概述</title>
      <link>https://zhj0513.github.io/p/mysql%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Sun, 26 Sep 2021 05:37:05 +0800</pubDate>
      
      <guid>https://zhj0513.github.io/p/mysql%E6%A6%82%E8%BF%B0/</guid>
      <description>架构 server层
 连接器：管理连接，权限验证 查询缓存 分析器：词法、语法解析 优化器：生成执行计划，索引选择 执行器：操作引擎，返回结果  存储引擎层
 负责数据存储和提取，插件式，支持InnoDB、MyISAM多个存储引擎  Innodb
后台线程：负责刷新内存池中的数据，保证缓存池中的内存缓存是最近的数据，将已修改的数据刷新到磁盘文件，同时保证数据库发生异常的情况能恢复到正常情况；
内存池：内存池也可以叫做缓存池，主要为弥补磁盘的速度较慢对数据库产生的影响，查询的时候，首先将磁盘读到的页的数据放在内存池中，下次读取的时候直接从内存池中读取数据，修改数据的时候，首先修改内存池中的数据，然后后台线程按照一定的频率刷新到磁盘上。
日志系统 redo log（重做日志）  InnoDB引擎的日志，redo log 保证数据库异常重启之前提交的记录不会丢失（crash-safe），确保事务的持久性。 在一条更新语句进行执行的时候，InnoDB引擎会把更新记录写到 redo log 日志中，然后更新内存（buffer pool），此时算是语句执行完了，然后在空闲的时候或者是按照设定的更新策略将 redo log 中的内容更新到磁盘中，这里涉及到WAL即Write Ahead logging技术（先写日志再写磁盘） redo log 是物理日志，记录的是在某个数据页上做了什么修改 redo log是循环写，空间固定会用完   出现 MySQL 宕机或者断电时，如果有缓存页的数据还没来得及刷入磁盘，当 MySQL 重新启动时，可以根据 redo log 日志文件，进行数据重做，将数据恢复到宕机或者断电前的状态
redo log 日志文件是持久化在磁盘上的，磁盘上可以有多个 redo log 文件，MySQL 默认有 2 个 redo log 文件，每个文件大小为 48M
redo log 日志是存储在磁盘上的，那么此时是不是立马就将 redo log 日志写入磁盘呢？显然不是的，而是先写入一个叫做 redo log buffer 的缓存中，redo log buffer 是一块不同于 buffer pool 的内存缓存区</description>
    </item>
    
  </channel>
</rss>
