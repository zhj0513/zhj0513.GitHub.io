<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>面试 on Gakkiの一般男性</title>
    <link>https://zhj0513.github.io/categories/%E9%9D%A2%E8%AF%95/</link>
    <description>Recent content in 面试 on Gakkiの一般男性</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 26 Sep 2021 05:37:05 +0800</lastBuildDate><atom:link href="https://zhj0513.github.io/categories/%E9%9D%A2%E8%AF%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MySQL概述</title>
      <link>https://zhj0513.github.io/p/mysql%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Sun, 26 Sep 2021 05:37:05 +0800</pubDate>
      
      <guid>https://zhj0513.github.io/p/mysql%E6%A6%82%E8%BF%B0/</guid>
      <description>架构 server层
 连接器：管理连接，权限验证 查询缓存 分析器：词法、语法解析 优化器：生成执行计划，索引选择 执行器：操作引擎，返回结果  存储引擎层
 负责数据存储和提取，插件式，支持InnoDB、MyISAM多个存储引擎  Innodb
后台线程：负责刷新内存池中的数据，保证缓存池中的内存缓存是最近的数据，将已修改的数据刷新到磁盘文件，同时保证数据库发生异常的情况能恢复到正常情况；
内存池：内存池也可以叫做缓存池，主要为弥补磁盘的速度较慢对数据库产生的影响，查询的时候，首先将磁盘读到的页的数据放在内存池中，下次读取的时候直接从内存池中读取数据，修改数据的时候，首先修改内存池中的数据，然后后台线程按照一定的频率刷新到磁盘上。
日志系统 redo log（重做日志）  InnoDB引擎的日志，redo log 保证数据库异常重启之前提交的记录不会丢失（crash-safe），确保事务的持久性。 在一条更新语句进行执行的时候，InnoDB引擎会把更新记录写到 redo log 日志中，然后更新内存（buffer pool），此时算是语句执行完了，然后在空闲的时候或者是按照设定的更新策略将 redo log 中的内容更新到磁盘中，这里涉及到WAL即Write Ahead logging技术（先写日志再写磁盘） redo log 是物理日志，记录的是在某个数据页上做了什么修改 redo log是循环写，空间固定会用完   出现 MySQL 宕机或者断电时，如果有缓存页的数据还没来得及刷入磁盘，当 MySQL 重新启动时，可以根据 redo log 日志文件，进行数据重做，将数据恢复到宕机或者断电前的状态
redo log 日志文件是持久化在磁盘上的，磁盘上可以有多个 redo log 文件，MySQL 默认有 2 个 redo log 文件，每个文件大小为 48M
redo log 日志是存储在磁盘上的，那么此时是不是立马就将 redo log 日志写入磁盘呢？显然不是的，而是先写入一个叫做 redo log buffer 的缓存中，redo log buffer 是一块不同于 buffer pool 的内存缓存区</description>
    </item>
    
  </channel>
</rss>
